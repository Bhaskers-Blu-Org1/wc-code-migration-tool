package com.ibm.commerce.qcheck.core;

/*
 *-----------------------------------------------------------------
 * Copyright 2018 Trent Hoeppner
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-----------------------------------------------------------------
 */

/**
 * ModelEnum lists the different types of {@link Model models} available for
 * use.
 * 
 * @author Trent Hoeppner
 */
public enum ModelEnum {

	/**
	 * Represents the resource as a simple String. This is used as a basis for
	 * all text models.
	 */
	STRING("String", new StringModelFactory()),

	/**
	 * Represents the resource as {@link TextPositions}. This can be used for
	 * any string.
	 */
	TEXT_POS("TextPositions", new TextPositionsModelFactory()),

	/**
	 * Represents the resource as an Eclipse CompilationUnit. This is only used
	 * for Java file resources.
	 */
	COMP_UNIT("CompilationUnit", new CompUnitModelFactory()),

	/**
	 * Represents that the resource is validated externally. This is a special
	 * model. If a validator requires an EXTERNAL model, the other models MUST
	 * be cleaned up after being used for each resource by calling
	 * {@link ModelRegistry#clearValidator(ValidatorResource)}. This is to avoid
	 * a memory leak if an external validator is used to analyze hundreds or
	 * thousands of files at one time.
	 */
	EXTERNAL("External", null),

	/**
	 * Represents that the resource is validated in batch. This is a special
	 * model. If a validator requires an BATCH model, the other models MUST be
	 * cleaned up after being used for each resource by calling
	 * {@link ModelRegistry#clearValidator(ValidatorResource)}. This is to avoid
	 * a memory leak if an external validator is used to analyze hundreds or
	 * thousands of files at one time.
	 */
	BATCH("Batch", null);

	/**
	 * The name of the model. This value will never be null or empty.
	 */
	private String name;

	/**
	 * The factory that can produce models of the desired type. This value will
	 * be null when not given in the constructor, and indicates that models
	 * cannot be generated by this.
	 */
	private ModelFactory factory;

	/**
	 * Constructor for this.
	 *
	 * @param name
	 *            The name of the model. Cannot be null or empty.
	 * @param factory
	 *            The factory to produce instances of the model. If null, no
	 *            models can be produced for this type.
	 */
	private ModelEnum(String name, ModelFactory factory) {
		this.name = name;
		this.factory = factory;
	}

	/**
	 * Returns a model for the given resource with the type defined by this.
	 *
	 * @param <T>
	 *            The type of the model.
	 * @param resource
	 *            The resource to get the model for. Cannot be null.
	 *
	 * @return The desired model. Will not be null.
	 */
	public <T extends Model> T getModel(ValidatorResource resource) {
		Param.notNull(resource, "resource");

		ModelRegistry modelRegistry = resource.getModelRegistry();
		if (!modelRegistry.isRegistered(name)) {
			modelRegistry.register(name, factory);
		}

		T model = modelRegistry.getModel(name, resource);
		return model;
	}

	/**
	 * Returns the data from the model for the given resource.
	 *
	 * @param <M>
	 *            The type of the data from the model.
	 * @param resource
	 *            The resource to get the data from. Cannot be null.
	 *
	 * @return The data returned. Will not be null.
	 */
	public <M> M getData(ValidatorResource resource) {
		Param.notNull(resource, "resource");

		Model<M> model = getModel(resource);
		M data = model.getModel();
		return data;
	}

	/**
	 * Returns the name of the model.
	 *
	 * @return The name of the model. Will not be null or empty.
	 */
	public String getName() {
		return name;
	}

	/**
	 * Returns the factory that produces instances of the model.
	 *
	 * @return The factory that is used to generate models. A null value
	 *         indicates that models cannot be generated for this type.
	 */
	public ModelFactory getFactory() {
		return factory;
	}
}
